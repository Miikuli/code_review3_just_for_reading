/*
 * Напишите генератор паролей. Составьте три уровня сложности генерации паролей (вместе
 * с их длиной) и спрашивайте у пользователя, какой уровень сложности ему нужен. Проявите свою
 * изобретательность: надёжные пароли должны состоять из сочетания строчных букв, прописных
 * букв, цифр и символов. Пароли должны генерироваться случайным образом каждый раз, когда
 * пользователь запрашивает новый пароль.
 */

#include "password_generator.h" // Подключаем заголовочный файл (предполагается, что он существует)
#include <cstdlib>              // Подключаем для использования функции rand() (генератор псевдослучайных чисел)
#include <algorithm>            // Подключаем для использования функции std::random_shuffle() (перемешивание элементов)

/**
 * @brief Получает случайный символ из заданной строки набора символов.
 *
 * Использует генератор псевдослучайных чисел rand() для выбора случайного индекса
 * в пределах длины строки charset и возвращает символ, находящийся по этому индексу.
 *
 * @param charset Строка, содержащая набор символов, из которого будет выбран случайный символ.
 * @return Случайно выбранный символ из строки charset.
 */
char GetRandomChar(const std::string& charset) {
    // rand() % charset.size() генерирует случайное число в диапазоне от 0 до (charset.size() - 1),
    // что соответствует допустимым индексам строки charset.
    return charset[rand() % charset.size()];
}

/**
 * @brief Перемешивает символы в заданной строке случайным образом.
 *
 * Использует алгоритм std::random_shuffle из стандартной библиотеки C++ для случайного
 * переупорядочивания символов в переданной строке str. Перемешивание выполняется "на месте",
 * то есть исходная строка str модифицируется.
 *
 * @param str Ссылка на строку, символы которой необходимо перемешать.
 */
void ShuffleString(std::string& str) {
    // std::random_shuffle принимает итераторы, указывающие на начало и конец последовательности
    // (в данном случае, начало и конец строки) и случайным образом переставляет элементы в этом диапазоне.
    std::random_shuffle(str.begin(), str.end());
}

/**
 * @brief Генерирует случайный пароль заданной длины, используя указанные наборы символов.
 *
 * Сначала функция добавляет в пароль по одному случайному символу из каждого предоставленного
 * набора символов (если наборов несколько). Затем, для заполнения оставшейся длины пароля,
 * она случайным образом выбирает символы из объединения всех предоставленных наборов.
 * В конце сгенерированный пароль перемешивается для обеспечения более равномерного распределения
 * различных типов символов.
 *
 * @param length Желаемая длина генерируемого пароля.
 * @param charsets Вектор строк, где каждая строка представляет собой набор символов
 * для определенного типа (например, строчные буквы, прописные буквы, цифры, символы).
 * @return Сгенерированный случайный пароль заданной длины.
 */
std::string GeneratePassword(int length, const std::vector<std::string>& charsets) {
    std::string password; // Инициализируем пустую строку для хранения пароля

    // Добавляем по одному случайному символу из каждого набора символов в начало пароля.
    // Это гарантирует, что в пароле будут присутствовать символы из каждого указанного типа (если это возможно
    // исходя из длины пароля и количества наборов символов).
    for (size_t i = 0; i < charsets.size(); ++i) {
        password += GetRandomChar(charsets[i]);
    }

    std::string allChars; // Строка для хранения всех возможных символов из всех наборов
    // Объединяем все наборы символов в одну строку allChars, чтобы затем выбирать случайные символы из нее.
    for (size_t i = 0; i < charsets.size(); ++i) {
        allChars += charsets[i];
    }

    // Заполняем оставшуюся часть пароля случайными символами из объединенного набора allChars.
    // Цикл выполняется до тех пор, пока длина пароля не достигнет желаемой длины (length).
    for (int i = static_cast<int>(charsets.size()); i < length; ++i) {
        password += GetRandomChar(allChars);
    }

    // Перемешиваем символы в сгенерированном пароле для повышения случайности и равномерного
    // распределения различных типов символов по всей длине пароля.
    ShuffleString(password);
    return password; // Возвращаем сгенерированный и перемешанный пароль.
}
