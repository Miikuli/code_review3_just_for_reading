#ifndef GRAPH_UTILS_H
#define GRAPH_UTILS_H

#include <vector>   // Подключаем заголовочный файл для использования динамических массивов (векторов)
#include <string>   // Подключаем заголовочный файл для работы со строками
#include <fstream>  // Подключаем заголовочный файл для работы с файлами (чтение)

/**
 * @file graf.h
 * @brief Заголовочный файл для утилит, предназначенных для работы с неориентированными графами.
 *
 * Этот файл содержит объявления структур данных и прототипы функций, необходимых для:
 * - Чтения матрицы смежности графа из текстового файла.
 * - Вычисления степени каждой вершины графа на основе матрицы смежности.
 */

/**
 * @brief Читает матрицу смежности неориентированного графа из текстового файла.
 *
 * Функция открывает файл с указанным именем и пытается прочитать из него описание графа
 * в виде матрицы смежности.
 *
 * Формат входного файла:
 * - Первая строка файла должна содержать одно целое число - количество вершин графа (n).
 * - Следующие n строк должны содержать по n целых чисел (разделенных пробелами), каждое из которых
 * является элементом матрицы смежности. Значение 1 означает наличие ребра между соответствующими
 * вершинами, 0 - отсутствие ребра.
 *
 * @param filename Имя файла, из которого необходимо прочитать матрицу смежности.
 * @param n Ссылка на целочисленную переменную, в которую будет записано количество вершин графа,
 * прочитанное из файла.
 * @param adjacencyMatrix Ссылка на двумерный вектор целых чисел, который будет заполнен
 * матрицей смежности графа, прочитанной из файла.
 * @return true, если файл был успешно открыт, данные корректно прочитаны и формат файла
 * соответствует ожидаемому, false в случае возникновения какой-либо ошибки
 * (например, файл не найден, некорректный формат данных).
 */
bool ReadAdjacencyMatrix(const std::string& filename, int& n, std::vector<std::vector<int>>& adjacencyMatrix);

/**
 * @brief Вычисляет степень каждой вершины неориентированного графа на основе его
 * матрицы смежности.
 *
 * Степень вершины в неориентированном графе - это количество ребер, инцидентных этой вершине.
 * При этом, если в графе есть петли (ребро из вершины в саму себя, т.е. adjacencyMatrix[i][i] == 1),
 * каждая такая петля вносит вклад в степень вершины, равный двум.
 *
 * @param n Количество вершин графа.
 * @param adjacencyMatrix Константная ссылка на двумерный вектор целых чисел, представляющий
 * матрицу смежности графа.
 * @param degrees Ссылка на вектор целых чисел, который будет заполнен степенями вершин графа.
 * Элемент вектора с индексом i будет содержать степень вершины с номером i+1.
 * Размер вектора будет автоматически изменен в соответствии с количеством вершин.
 */
void CalculateDegrees(int n, const std::vector<std::vector<int>>& adjacencyMatrix, std::vector<int>& degrees);

#endif // GRAPH_UTILS_H
