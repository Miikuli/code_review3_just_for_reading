#include "graf.h" // Подключаем заголовочный файл с объявлениями функций
#include <iostream>   // Подключаем для вывода сообщений об ошибках
#include <fstream>    // Подключаем для работы с файлами (чтение)
#include <vector>     // Подключаем для использования векторов
#include <string>     // Подключаем для работы со строками

/**
 * @brief Реализация функции для чтения матрицы смежности неориентированного графа из файла.
 * @param filename Имя файла для чтения.
 * @param n Возвращает количество вершин графа.
 * @param adjacencyMatrix Возвращает матрицу смежности графа.
 * @return true, если чтение прошло успешно, false в случае ошибки.
 */
bool ReadAdjacencyMatrix(const std::string& filename, int& n, std::vector<std::vector<int>>& adjacencyMatrix) {
    std::ifstream inputFile(filename); // Открываем файл для чтения
    if (!inputFile.is_open()) {       // Проверяем, удалось ли открыть файл
        std::cerr << "Ошибка открытия файла: " << filename << std::endl;
        return false; // Если не удалось открыть, возвращаем false
    }

    if (!(inputFile >> n) || n <= 0) { // Пытаемся прочитать количество вершин и проверяем корректность
        std::cerr << "Некорректный формат файла: отсутствует количество вершин или оно неверно." << std::endl;
        inputFile.close(); // Закрываем файл
        return false;      // Возвращаем false, так как данные некорректны
    }

    adjacencyMatrix.resize(n, std::vector<int>(n)); // Изменяем размер матрицы смежности в соответствии с количеством вершин
    for (int i = 0; i < n; ++i) {                 // Цикл по строкам матрицы
        for (int j = 0; j < n; ++j) {             // Цикл по столбцам матрицы
            if (!(inputFile >> adjacencyMatrix[i][j])) { // Пытаемся прочитать элемент матрицы
                std::cerr << "Некорректный формат файла: ошибка при чтении матрицы смежности." << std::endl;
                inputFile.close(); // Закрываем файл
                return false;      // Возвращаем false, так как чтение не удалось
            }
            if (adjacencyMatrix[i][j] != 0 && adjacencyMatrix[i][j] != 1) { // Проверяем, что элемент равен 0 или 1
                std::cerr << "Некорректный формат файла: матрица смежности должна содержать только 0 и 1." << std::endl;
                inputFile.close(); // Закрываем файл
                return false;      // Возвращаем false, так как значение некорректно
            }
        }
    }

    inputFile.close(); // Закрываем файл после успешного чтения
    return true;       // Возвращаем true, так как чтение прошло успешно
}

/**
 * @brief Реализация функции для вычисления степеней вершин неориентированного графа.
 * @param n Количество вершин графа.
 * @param adjacencyMatrix Матрица смежности графа.
 * @param degrees Вектор для хранения степеней вершин.
 */
void CalculateDegrees(int n, const std::vector<std::vector<int>>& adjacencyMatrix, std::vector<int>& degrees) {
    degrees.resize(n, 0); // Изменяем размер вектора степеней в соответствии с количеством вершин и инициализируем нулями
    for (int i = 0; i < n; ++i) {     // Цикл по каждой вершине графа (от 0 до n-1)
        for (int j = 0; j < n; ++j) { // Цикл по всем возможным смежным вершинам
            if (adjacencyMatrix[i][j] == 1) { // Если между вершинами i и j есть ребро
                if (i == j) {               // Проверяем, является ли это петлей (ребро из вершины в саму себя)
                    degrees[i] += 2;       // Если это петля, увеличиваем степень вершины i на 2
                } else {
                    degrees[i]++;           // Если это обычное ребро, увеличиваем степень вершины i на 1
                }
            }
        }
    }
}
